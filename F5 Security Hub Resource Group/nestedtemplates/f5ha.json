{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "3.2.0.0",
  "parameters": {
    "adminUsername": {
      "defaultValue": "azureuser",
      "metadata": {
        "description": "User name for the Virtual Machine."
      },
      "type": "string"
    },
    "adminPassword": {
      "metadata": {
        "description": "Password to login to the Virtual Machine."
      },
      "type": "securestring"
    },
    "dnsLabel": {
      "defaultValue": "REQUIRED",
      "metadata": {
        "description": "Unique DNS Name for the Public IP address used to access the Virtual Machine"
      },
      "type": "string"
    },
    "instanceName": {
      "defaultValue": "f5vm01",
      "metadata": {
        "description": "Name of the Virtual Machine."
      },
      "type": "string"
    },
    "instanceType": {
      "allowedValues": [
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F4S",
        "Standard_F8S"
      ],
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "Azure instance size of the Virtual Machine."
      },
      "type": "string"
    },
    "imageName": {
      "allowedValues": [
        "Good",
        "Better",
        "Best"
      ],
      "defaultValue": "Good",
      "metadata": {
        "description": "F5 SKU (IMAGE) to you want to deploy."
      },
      "type": "string"
    },
    "bigIpVersion": {
      "allowedValues": [
        "13.0.021",
        "12.1.24",
        "latest"
      ],
      "defaultValue": "13.0.021",
      "metadata": {
        "description": "F5 BIG-IP version you want to use."
      },
      "type": "string"
    },
    "licenseKey1": {
      "defaultValue": "REQUIRED",
      "metadata": {
        "description": "The license token for the F5 BIG-IP VE (BYOL)"
      },
      "type": "string"
    },
    "licenseKey2": {
      "defaultValue": "REQUIRED",
      "metadata": {
        "description": "The license token for the F5 BIG-IP VE (BYOL). This field is required when deploying two or more devices."
      },
      "type": "string"
    },
    "numberOfExternalIps": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "defaultValue": 1,
      "metadata": {
        "description": "The number of public/private IP addresses you want to deploy for the application traffic (external) NIC on the BIG-IP VE to be used for virtual servers."
      },
      "type": "int"
    },
    "vnetName": {
      "metadata": {
        "description": "The name of the existing virtual network to which you want to connect the BIG-IP VEs."
      },
      "type": "string"
    },
    "vnetResourceGroupName": {
      "metadata": {
        "description": "The name of the resource group that contains the Virtual Network where the BIG-IP VE will be placed."
      },
      "type": "string"
    },
    "mgmtSubnetName": {
      "metadata": {
        "description": "Name of the existing MGMT subnet - with external access to the Internet."
      },
      "type": "string"
    },
    "mgmtIpAddressRangeStart": {
      "metadata": {
        "description": "The static private IP address you would like to assign to the management self IP of the first BIG-IP. The next contiguous address will be used for the second BIG-IP device."
      },
      "type": "string"
    },
    "externalSubnetName": {
      "metadata": {
        "description": "Name of the existing external subnet - with external access to Internet."
      },
      "type": "string"
    },
    "externalIpSelfAddressRangeStart": {
      "metadata": {
        "description": "The static private IP address you would like to assign to the external self IP (primary) of the first BIG-IP. The next contiguous address will be used for the second BIG-IP device."
      },
      "type": "string"
    },
    "externalIpAddressRangeStart": {
      "metadata": {
        "description": "The static private IP address (secondary) you would like to assign to the first shared Azure public IP. An additional private IP address will be assigned for each public IP address you specified in numberOfExternalIps.  For example, inputting 10.100.1.50 here and choosing 2 in numberOfExternalIps would result in 10.100.1.50 and 10.100.1.51 being configured as static private IP addresses for external virtual servers."
      },
      "type": "string"
    },
    "internalSubnetName": {
      "metadata": {
        "description": "Name of the existing internal subnet."
      },
      "type": "string"
    },
    "internalIpAddressRangeStart": {
      "metadata": {
        "description": "The static private IP address you would like to assign to the internal self IP of the first BIG-IP. The next contiguous address will be used for the second BIG-IP device."
      },
      "type": "string"
    },
    "tenantId": {
      "metadata": {
        "description": "Your Azure service principal application tenant ID."
      },
      "type": "string"
    },
    "clientId": {
      "metadata": {
        "description": "Your Azure service principal application client ID."
      },
      "type": "string"
    },
    "servicePrincipalSecret": {
      "metadata": {
        "description": "Your Azure service principal application secret."
      },
      "type": "securestring"
    },
    "managedRoutes": {
      "defaultValue": "NOT_SPECIFIED",
      "metadata": {
        "description": "A comma-delimited list of route destinations to be managed by this cluster.  For example: 0.0.0.0/0,192.168.1.0/24."
      },
      "type": "string"
    },
    "routeTableTag": {
      "defaultValue": "NOT_SPECIFIED",
      "metadata": {
        "description": "Azure tag value to identify the route tables to be managed by this cluster. For example tag value: myRoute.  Example Azure tag: f5_ha:myRoute."
      },
      "type": "string"
    },
    "ntpServer": {
      "defaultValue": "0.pool.ntp.org",
      "metadata": {
        "description": "If you would like to change the NTP server the BIG-IP uses replace the default ntp server with your choice."
      },
      "type": "string"
    },
    "timeZone": {
      "defaultValue": "UTC",
      "metadata": {
        "description": "If you would like to change the time zone the BIG-IP uses then enter your chocie. This is in the format of the Olson timezone string from /usr/share/zoneinfo, such as UTC, US/Central or Europe/London."
      },
      "type": "string"
    },
    "restrictedSrcAddress": {
      "defaultValue": "*",
      "metadata": {
        "description": "This field restricts management access to a specific network or address. Enter an IP address or address range in CIDR notation, or asterisk for all sources"
      },
      "type": "string"
    },
    "tagValues": {
      "defaultValue": {
        "application": "APP",
        "cost": "COST",
        "environment": "ENV",
        "group": "GROUP",
        "owner": "OWNER"
      },
      "metadata": {
        "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
      },
      "type": "object"
    }
  },
  "variables": {
    "bigIpNicPortMap": {
      "1": {
        "Port": "[parameters('bigIpVersion')]"
      },
      "2": {
        "Port": "443"
      },
      "3": {
        "Port": "443"
      },
      "4": {
        "Port": "443"
      },
      "5": {
        "Port": "443"
      },
      "6": {
        "Port": "443"
      }
    },
    "bigIpVersionPortMap": {
      "12.1.24": {
        "Port": 443
      },
      "13.0.021": {
        "Port": 8443
      },
      "443": {
        "Port": 443
      },
      "latest": {
        "Port": 8443
      }
    },
    "apiVersion": "2015-06-15",
    "computeApiVersion": "2015-06-15",
    "networkApiVersion": "2015-06-15",
    "storageApiVersion": "2015-06-15",
    "insightsApiVersion": "2015-04-01",
    "location": "[resourceGroup().location]",
    "subscriptionID": "[subscription().subscriptionId]",
    "resourceGroupName": "[resourceGroup().name]",
    "singleQuote": "'",
    "f5CloudLibsTag": "v3.1.1",
    "f5CloudLibsAzureTag": "v1.2.0",
    "f5NetworksTag": "v3.2.0.0",
    "f5CloudIappsTag": "v1.0.0",
    "verifyHash": "[concat(variables('singleQuote'), 'cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 6db9649698cb7af311defc89ccea1c0208d3b6cfc73b7bab5b52ab9d5074677ec9a1559a5e54e7325aa334a02d26d76528b5ead08e1654dcbf77c94192156468\n            set hashes(f5-cloud-libs-aws.tar.gz) 6a2cb0d101c918d37aa552528a45f14615ab50fe8a024c2040cf686a4ec1ce316a75930d936de3dc341a1a5f9cec14e9979f0f9cb601f51dba528929de607e6e\n            set hashes(f5-cloud-libs-azure.tar.gz) a4ff4a9af058ce6058159531fd7bca07eb8808cdd1b1e13de0e1324ec7e4692211991ecaa58dc36021c6c88c7783837d480584393753c3dfc2fddf623781e3a9\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 4c125f7cbc4d701cf50f03de479ebe99a08c2b2c3fa6aae3e229eb3f0bba98bb513d630368229c98e7c5c907e6a3168ece2f8f576267514bad4f6730ea14d454\n            set hashes(f5.policy_creator.tmpl) 54d265e0a573d3ae99864adf4e054b293644e48a54de1e19e8a6826aa32ab03bd04c7255fd9c980c3673e9cd326b0ced513665a91367add1866875e5ef3c4e3a\n            set hashes(f5.service_discovery.tmpl) 306170ab4ec2494ed290406be37ab32af57ed59c9d614e9a86958375b7719335e6c73831fdba6bdcfb552c40227f5773dc719f2b7d6ff7c0a046180a34beb162\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature g06yXetqmFE8eLjmTqvFlI0BH23SEk5roJPzb6eHWMaf41SUjPiEacUkW6rLv3qB/mLKPJrI6QqDhloU4m0zdJndl4w18CMDtiozCUSNcapAf36huJ1VJQfc3KzIzdDPld7jgSqXa+hlA0KBtjkevjzeCKFsaKSg4wkoGUuObWJTWN5OimHsJsOxnLO3S1DpBmab0zgVy9+jvQQpg0DgKdsp2DGbVwOV9iS+lepmaBk/eXaTic2hAEqGMEi61fwzaoYU3jZwGytOEgMeK94GIp3vp3r324Ck1NrRCL1LunwbDcsZkMlvxRX9k9Y7DkDwfRsp/e7Tz11FjCOqRRtGGg==\n    signing-key /Common/f5-irule\n}', variables('singleQuote'))]",
    "installCloudLibs": "[concat(variables('singleQuote'), '#!/bin/bash\necho about to execute\nchecks=0\nwhile [ $checks -lt 120 ]; do echo checking mcpd\n/usr/bin/tmsh -a show sys mcp-state field-fmt | grep -q running\nif [ $? == 0 ]; then\necho mcpd ready\nbreak\nfi\necho mcpd not ready yet\nlet checks=checks+1\nsleep 1\ndone\necho loading verifyHash script\n/usr/bin/tmsh load sys config merge file /config/verifyHash\nif [ $? != 0 ]; then\necho cannot validate signature of /config/verifyHash\nexit 1\nfi\necho loaded verifyHash\nscript_loc=\"/var/lib/waagent/custom-script/download/0/\"\nconfig_loc=\"/config/cloud/\"\nhashed_file_list=\"${config_loc}f5-cloud-libs.tar.gz ${script_loc}f5.service_discovery.tmpl ${config_loc}f5-cloud-libs-azure.tar.gz\"\nfor file in $hashed_file_list; do\necho \"verifying $file\"\n/usr/bin/tmsh run cli script verifyHash $file\nif [ $? != 0 ]; then\necho \"$file is not valid\"\nexit 1\nfi\necho \"verified $file\"\ndone\necho \"expanding $hashed_file_list\"\ntar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/node_modules\ntar xvfz /config/cloud/f5-cloud-libs-azure.tar.gz -C /config/cloud/node_modules/f5-cloud-libs/node_modules\ntouch /config/cloud/cloudLibsReady', variables('singleQuote'))]",
    "dnsLabel": "[toLower(parameters('dnsLabel'))]",
    "imageNameToLower": "[toLower(parameters('imageName'))]",
    "skuToUse": "[concat('f5-bigip-virtual-edition-', variables('imageNameToLower'),'-byol')]",
    "offerToUse": "f5-big-ip",
    "bigIpNicPortValue": "[variables('bigIpNicPortMap')['3'].Port]",
    "bigIpMgmtPort": "[variables('bigIpVersionPortMap')[variables('bigIpNicPortValue')].Port]",
    "instanceName": "[toLower(parameters('instanceName'))]",
    "availabilitySetName": "[concat(variables('dnsLabel'), '-avset')]",
    "virtualNetworkName": "[parameters('vnetName')]",
    "vnetId": "[resourceId(parameters('vnetResourceGroupName'),'Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "publicIPAddressType": "Static",
    "mgmtPublicIPAddressName": "[concat(variables('dnsLabel'), '-mgmt-pip')]",
    "mgmtPublicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('mgmtPublicIPAddressName'))]",
    "mgmtNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-mgmt-nsg'))]",
    "mgmtNicName": "[concat(variables('dnsLabel'), '-mgmt')]",
    "mgmtSubnetName": "[concat(variables('dnsLabel'),'-mgmt-subnet')]",
    "mgmtSubnetId": "[concat(variables('vnetID'),'/subnets/',parameters('mgmtSubnetName'))]",
    "mgmtSubnetPrivateAddressPrefixArray": "[split(parameters('mgmtIpAddressRangeStart'), '.')]",
    "mgmtSubnetPrivateAddressPrefix": "[concat(variables('mgmtSubnetPrivateAddressPrefixArray')[0], '.', variables('mgmtSubnetPrivateAddressPrefixArray')[1], '.', variables('mgmtSubnetPrivateAddressPrefixArray')[2], '.')]",
    "mgmtSubnetPrivateAddressSuffixInt": "[int(variables('mgmtSubnetPrivateAddressPrefixArray')[3])]",
    "mgmtSubnetPrivateAddressSuffix": "[add(variables('mgmtSubnetPrivateAddressSuffixInt'), 1)]",
    "mgmtSubnetPrivateAddress": "[parameters('mgmtIpAddressRangeStart')]",
    "mgmtSubnetPrivateAddress1": "[concat(variables('mgmtSubnetPrivateAddressPrefix'), variables('mgmtSubnetPrivateAddressSuffix'))]",
    "extSelfPublicIpAddressNamePrefix": "[concat(variables('dnsLabel'), '-self-pip')]",
    "extSelfPublicIpAddressIdPrefix": "[resourceId('Microsoft.Network/publicIPAddresses', variables('extSelfPublicIpAddressNamePrefix'))]",
    "extpublicIPAddressNamePrefix": "[concat(variables('dnsLabel'), '-ext-pip')]",
    "extPublicIPAddressIdPrefix": "[resourceId('Microsoft.Network/publicIPAddresses', variables('extPublicIPAddressNamePrefix'))]",
    "extNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-ext-nsg'))]",
    "extNicName": "[concat(variables('dnsLabel'), '-ext')]",
    "extSubnetName": "[parameters('externalSubnetName')]",
    "extSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('extsubnetName'))]",
    "extSubnetSelfPrivateAddressPrefixArray": "[split(parameters('externalIpSelfAddressRangeStart'), '.')]",
    "extSubnetSelfPrivateAddressPrefix": "[concat(variables('extSubnetSelfPrivateAddressPrefixArray')[0], '.', variables('extSubnetSelfPrivateAddressPrefixArray')[1], '.', variables('extSubnetSelfPrivateAddressPrefixArray')[2], '.')]",
    "extSubnetSelfPrivateAddressSuffixInt": "[int(variables('extSubnetSelfPrivateAddressPrefixArray')[3])]",
    "extSubnetSelfPrivateAddressSuffix": "[add(variables('extSubnetSelfPrivateAddressSuffixInt'), 1)]",
    "extSubnetPrivateAddress": "[parameters('externalIpSelfAddressRangeStart')]",
    "extSubnetPrivateAddress1": "[concat(variables('extSubnetSelfPrivateAddressPrefix'), variables('extSubnetSelfPrivateAddressSuffix'))]",
    "extSubnetPrivateAddressPrefixArray": "[split(parameters('externalIpAddressRangeStart'), '.')]",
    "extSubnetPrivateAddressPrefix": "[concat(variables('extSubnetPrivateAddressPrefixArray')[0], '.', variables('extSubnetPrivateAddressPrefixArray')[1], '.', variables('extSubnetPrivateAddressPrefixArray')[2], '.')]",
    "extSubnetPrivateAddressSuffixInt": "[int(variables('extSubnetPrivateAddressPrefixArray')[3])]",
    "extSubnetPrivateAddressSuffix0": "[add(variables('extSubnetPrivateAddressSuffixInt'), 1)]",
    "extSubnetPrivateAddressSuffix1": "[add(variables('extSubnetPrivateAddressSuffixInt'), 2)]",
    "extSubnetPrivateAddressSuffix2": "[add(variables('extSubnetPrivateAddressSuffixInt'), 3)]",
    "extSubnetPrivateAddressSuffix3": "[add(variables('extSubnetPrivateAddressSuffixInt'), 4)]",
    "extSubnetPrivateAddressSuffix4": "[add(variables('extSubnetPrivateAddressSuffixInt'), 5)]",
    "extSubnetPrivateAddressSuffix5": "[add(variables('extSubnetPrivateAddressSuffixInt'), 6)]",
    "extSubnetPrivateAddressSuffix6": "[add(variables('extSubnetPrivateAddressSuffixInt'), 7)]",
    "extSubnetPrivateAddressSuffix7": "[add(variables('extSubnetPrivateAddressSuffixInt'), 8)]",
    "intNicName": "[concat(variables('dnsLabel'), '-int')]",
    "intSubnetName": "[parameters('internalSubnetName')]",
    "intSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('intsubnetName'))]",
    "intSubnetPrivateAddress": "[parameters('internalIpAddressRangeStart')]",
    "intSubnetPrivateAddress1": "[concat(variables('intSubnetPrivateAddressPrefix'), variables('intSubnetPrivateAddressSuffix'))]",
    "intSubnetPrivateAddressPrefixArray": "[split(parameters('internalIpAddressRangeStart'), '.')]",
    "intSubnetPrivateAddressPrefix": "[concat(variables('intSubnetPrivateAddressPrefixArray')[0], '.', variables('intSubnetPrivateAddressPrefixArray')[1], '.', variables('intSubnetPrivateAddressPrefixArray')[2], '.')]",
    "intSubnetPrivateAddressSuffixInt": "[int(variables('intSubnetPrivateAddressPrefixArray')[3])]",
    "intSubnetPrivateAddressSuffix": "[add(variables('intSubnetPrivateAddressSuffixInt'), 1)]",
    "extSubnetRef": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/', parameters('vnetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', parameters('vnetName'), '/subnets/', parameters('externalSubnetName'))]",
    "intSubnetRef": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/', parameters('vnetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', parameters('vnetName'), '/subnets/', parameters('internalSubnetName'))]",
    "numberOfExternalIps": "[parameters('numberOfExternalIps')]",
    "selfIpconfigArray": [
      {
        "name": "[concat(variables('instanceName'), '-self-ipconfig')]",
        "properties": {
          "PublicIpAddress": {
            "Id": "[concat(variables('extSelfPublicIpAddressIdPrefix'), '0')]"
          },
          "primary": true,
          "privateIPAddress": "[variables('extSubnetPrivateAddress')]",
          "privateIPAllocationMethod": "Static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      },
      {
        "name": "[concat(variables('instanceName'), '-self-ipconfig')]",
        "properties": {
          "PublicIpAddress": {
            "Id": "[concat(variables('extSelfPublicIpAddressIdPrefix'), '1')]"
          },
          "primary": true,
          "privateIPAddress": "[variables('extSubnetPrivateAddress1')]",
          "privateIPAllocationMethod": "Static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      }
    ],
    "extIpconfigArray": [
      {
        "name": "[concat(variables('resourceGroupName'), '-ext-ipconfig0')]",
        "properties": {
          "PublicIpAddress": {
            "Id": "[concat(variables('extPublicIPAddressIdPrefix'), 0)]"
          },
          "primary": false,
          "privateIPAddress": "[concat(variables('extSubnetPrivateAddressPrefix'), variables('extSubnetPrivateAddressSuffix0'))]",
          "privateIPAllocationMethod": "Static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      },
      {
        "name": "[concat(variables('resourceGroupName'), '-ext-ipconfig1')]",
        "properties": {
          "PublicIpAddress": {
            "Id": "[concat(variables('extPublicIPAddressIdPrefix'), 1)]"
          },
          "primary": false,
          "privateIPAddress": "[concat(variables('extSubnetPrivateAddressPrefix'), variables('extSubnetPrivateAddressSuffix1'))]",
          "privateIPAllocationMethod": "Static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      },
      {
        "name": "[concat(variables('resourceGroupName'), '-ext-ipconfig2')]",
        "properties": {
          "PublicIpAddress": {
            "Id": "[concat(variables('extPublicIPAddressIdPrefix'), 2)]"
          },
          "primary": false,
          "privateIPAddress": "[concat(variables('extSubnetPrivateAddressPrefix'), variables('extSubnetPrivateAddressSuffix2'))]",
          "privateIPAllocationMethod": "Static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      },
      {
        "name": "[concat(variables('resourceGroupName'), '-ext-ipconfig3')]",
        "properties": {
          "PublicIpAddress": {
            "Id": "[concat(variables('extPublicIPAddressIdPrefix'), 3)]"
          },
          "primary": false,
          "privateIPAddress": "[concat(variables('extSubnetPrivateAddressPrefix'), variables('extSubnetPrivateAddressSuffix3'))]",
          "privateIPAllocationMethod": "Static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      },
      {
        "name": "[concat(variables('resourceGroupName'), '-ext-ipconfig4')]",
        "properties": {
          "PublicIpAddress": {
            "Id": "[concat(variables('extPublicIPAddressIdPrefix'), 4)]"
          },
          "primary": false,
          "privateIPAddress": "[concat(variables('extSubnetPrivateAddressPrefix'), variables('extSubnetPrivateAddressSuffix4'))]",
          "privateIPAllocationMethod": "Static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      },
      {
        "name": "[concat(variables('resourceGroupName'), '-ext-ipconfig5')]",
        "properties": {
          "PublicIpAddress": {
            "Id": "[concat(variables('extPublicIPAddressIdPrefix'), 5)]"
          },
          "primary": false,
          "privateIPAddress": "[concat(variables('extSubnetPrivateAddressPrefix'), variables('extSubnetPrivateAddressSuffix5'))]",
          "privateIPAllocationMethod": "Static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      },
      {
        "name": "[concat(variables('resourceGroupName'), '-ext-ipconfig6')]",
        "properties": {
          "PublicIpAddress": {
            "Id": "[concat(variables('extPublicIPAddressIdPrefix'), 6)]"
          },
          "primary": false,
          "privateIPAddress": "[concat(variables('extSubnetPrivateAddressPrefix'), variables('extSubnetPrivateAddressSuffix6'))]",
          "privateIPAllocationMethod": "Static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      },
      {
        "name": "[concat(variables('resourceGroupName'), '-ext-ipconfig7')]",
        "properties": {
          "PublicIpAddress": {
            "Id": "[concat(variables('extPublicIPAddressIdPrefix'), 7)]"
          },
          "primary": false,
          "privateIPAddress": "[concat(variables('extSubnetPrivateAddressPrefix'), variables('extSubnetPrivateAddressSuffix7'))]",
          "privateIPAllocationMethod": "Static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      }
    ],
    "instanceTypeMap": {
      "Standard_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A7": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D5_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_DS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS15_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS1_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS5_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_GS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS5": {
        "storageAccountType": "Premium_LRS"
      }
    },
    "newStorageAccountName": "[concat(uniquestring(resourceGroup().id), 'stor')]",
    "storageAccountType": "[variables('instanceTypeMap')[parameters('instanceType')].storageAccountType]",
    "newDataStorageAccountName": "[concat(uniquestring(resourceGroup().id), 'data000')]",
    "dataStorageAccountType": "Standard_LRS"
  },
  "resources": [
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[variables('location')]",
      "name": "[concat(variables('mgmtPublicIPAddressName'), 0)]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('dnsLabel'), '-0')]"
        },
        "idleTimeoutInMinutes": 30,
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[variables('location')]",
      "name": "[concat(variables('mgmtPublicIPAddressName'), 1)]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('dnsLabel'), '-1')]"
        },
        "idleTimeoutInMinutes": 30,
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[variables('location')]",
      "name": "[concat(variables('extSelfPublicIpAddressNamePrefix'), '0')]",
      "properties": {
        "idleTimeoutInMinutes": 30,
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[variables('location')]",
      "name": "[concat(variables('extSelfPublicIpAddressNamePrefix'), '1')]",
      "properties": {
        "idleTimeoutInMinutes": 30,
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "copy": {
        "count": "[variables('numberOfExternalIps')]",
        "name": "extpipcopy"
      },
      "location": "[variables('location')]",
      "name": "[concat(variables('extPublicIPAddressNamePrefix'), copyIndex())]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('dnsLabel'), copyIndex(0))]"
        },
        "idleTimeoutInMinutes": 30,
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "f5_extSubnetId": "[variables('extSubnetId')]",
        "f5_privateIp": "[concat(variables('extSubnetPrivateAddressPrefix'), add(variables('extSubnetPrivateAddressSuffixInt'), copyIndex()))]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('mgmtPublicIPAddressName'), '0')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('mgmtNicName'), '0')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('dnsLabel'), '-mgmt-ipconfig')]",
            "properties": {
              "PublicIpAddress": {
                "Id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat(variables('mgmtPublicIPAddressName'), '0'))]"
              },
              "privateIPAddress": "[variables('mgmtSubnetPrivateAddress')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('mgmtSubnetId')]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[variables('mgmtNsgId')]"
        }
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('mgmtPublicIPAddressName'), '1')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('mgmtNicName'), '1')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('dnsLabel'), '-mgmt-ipconfig')]",
            "properties": {
              "PublicIpAddress": {
                "Id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat(variables('mgmtPublicIPAddressName'), '1'))]"
              },
              "privateIPAddress": "[variables('mgmtSubnetPrivateAddress1')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('mgmtSubnetId')]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[variables('mgmtNsgId')]"
        }
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('extSelfPublicIpAddressNamePrefix'), '0')]",
        "extpipcopy"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('extNicName'), '0')]",
      "properties": {
        "ipConfigurations": "[concat(take(variables('selfIpConfigArray'), 1), take(variables('extIpConfigArray'), parameters('numberOfExternalIps')))]",
        "networkSecurityGroup": {
          "id": "[concat(variables('extNsgId'))]"
        }
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('extSelfPublicIpAddressNamePrefix'), '1')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('extNicName'), '1')]",
      "properties": {
        "ipConfigurations": "[skip(variables('selfIpConfigArray'), 1)]",
        "networkSecurityGroup": {
          "id": "[concat(variables('extNsgId'))]"
        }
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "dependsOn": [
        "[concat(variables('extNsgID'))]",
        "extpipcopy"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('intNicName'), '0')]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "[concat(variables('dnsLabel'), '-int-ipconfig')]",
            "properties": {
              "privateIPAddress": "[variables('intSubnetPrivateAddress')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('intSubnetId')]"
              }
            }
          }
        ]
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "dependsOn": [
        "[concat(variables('extNsgID'))]",
        "extpipcopy"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('intNicName'), '1')]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "[concat(variables('dnsLabel'), '-int-ipconfig')]",
            "properties": {
              "privateIPAddress": "[variables('intSubnetPrivateAddress1')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('intSubnetId')]"
              }
            }
          }
        ]
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "location": "[variables('location')]",
      "name": "[concat(variables('dnsLabel'), '-mgmt-nsg')]",
      "properties": {
        "securityRules": [
          {
            "name": "mgmt_allow_https",
            "properties": {
              "access": "Allow",
              "description": "",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "[variables('bigIpMgmtPort')]",
              "direction": "Inbound",
              "priority": 101,
              "protocol": "TCP",
              "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "ssh_allow_22",
            "properties": {
              "access": "Allow",
              "description": "",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22",
              "direction": "Inbound",
              "priority": 102,
              "protocol": "TCP",
              "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
              "sourcePortRange": "*"
            }
          }
        ]
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "location": "[variables('location')]",
      "name": "[concat(variables('dnsLabel'), '-ext-nsg')]",
      "properties": {
        "securityRules": ""
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "location": "[variables('location')]",
      "name": "[variables('availabilitySetName')]",
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[variables('location')]",
      "name": "[variables('newStorageAccountName')]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[variables('location')]",
      "name": "[variables('newDataStorageAccountName')]",
      "properties": {
        "accountType": "[variables('dataStorageAccountType')]"
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '0')]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('extNicName'), '0')]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '0')]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '0')]",
      "plan": {
        "name": "[variables('skuToUse')]",
        "product": "[variables('offerToUse')]",
        "publisher": "f5-networks"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('http://',variables('newDataStorageAccountName'),'.blob.core.windows.net')]"
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('mgmtNicName'), '0'))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('extNicName'), '0'))]",
              "properties": {
                "primary": false
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('intNicName'), '0'))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "osProfile": {
          "adminPassword": "[parameters('adminPassword')]",
          "adminUsername": "[parameters('adminUsername')]",
          "computerName": "[variables('instanceName')]"
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('offerToUse')]",
            "publisher": "f5-networks",
            "sku": "[variables('skuToUse')]",
            "version": "[parameters('bigIpVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',variables('newStorageAccountName'), '.blob.core.windows.net/vhds/', variables('instanceName'), '0.vhd')]"
            }
          }
        }
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '1')]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('extNicName'), '1')]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '1')]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '1')]",
      "plan": {
        "name": "[variables('skuToUse')]",
        "product": "[variables('offerToUse')]",
        "publisher": "f5-networks"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('http://',variables('newDataStorageAccountName'),'.blob.core.windows.net')]"
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('mgmtNicName'), '1'))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('extNicName'), '1'))]",
              "properties": {
                "primary": false
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('intNicName'), '1'))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "osProfile": {
          "adminPassword": "[parameters('adminPassword')]",
          "adminUsername": "[parameters('adminUsername')]",
          "computerName": "[variables('instanceName')]"
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('offerToUse')]",
            "publisher": "f5-networks",
            "sku": "[variables('skuToUse')]",
            "version": "[parameters('bigIpVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',variables('newStorageAccountName'), '.blob.core.windows.net/vhds/', variables('instanceName'), '1.vhd')]"
            }
          }
        }
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabel'), '-', variables('instanceName'), '0')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '0/start')]",
      "properties": {
        "autoUpgradeMinorVersion": "true",
        "protectedSettings": {
          "commandToExecute": "[concat('mkdir -p /config/cloud/node_modules && cp f5-cloud-libs*.tar.gz* /config/cloud; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; /usr/bin/install -b -m 400 /dev/null /config/cloud/passwd; /usr/bin/install -b -m 400 /dev/null /config/cloud/azCredentials; /usr/bin/install -b -m 755 /dev/null /config/cloud/managedRoutes; /usr/bin/install -b -m 755 /dev/null /config/cloud/routeTableTag; IFS=', variables('singleQuote'), '%', variables('singleQuote'), '; echo -e ', variables('verifyHash'), ' > /config/verifyHash; echo -e ', variables('installCloudLibs'), ' > /config/installCloudLibs.sh; echo ', variables('singleQuote'), parameters('adminPassword'), variables('singleQuote'), ' > /config/cloud/passwd; echo ', variables('singleQuote'), '{\"clientId\": \"', parameters('clientId'), '\", \"tenantId\": \"', parameters('tenantId'), '\", \"secret\": \"', parameters('servicePrincipalSecret'), '\", \"subscriptionId\": \"', variables('subscriptionID'), '\", \"resourceGroup\": \"', variables('resourceGroupName'), '\"}', variables('singleQuote'), ' > /config/cloud/azCredentials; echo -e ', parameters('managedRoutes'), ' > /config/cloud/managedRoutes; echo -e ', parameters('routeTableTag'), ' > /config/cloud/routeTableTag; unset IFS; bash /config/installCloudLibs.sh; /usr/bin/f5-rest-node /config/cloud/node_modules/f5-cloud-libs/scripts/onboard.js --output /var/log/onboard.log --log-level debug --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u admin --password-url file:///config/cloud/passwd --hostname ', concat(variables('instanceName'), '0.', resourceGroup().location, '.cloudapp.azure.com'), ' --license ', parameters('licenseKey1'), ' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --db tmm.maxremoteloglength:2048 --module ltm:nominal --module afm:none; /usr/bin/f5-rest-node /config/cloud/node_modules/f5-cloud-libs/scripts/network.js --output /var/log/network.log --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' -u admin --password-url file:///config/cloud/passwd --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 --self-ip name:self_2nic,address:', variables('extSubnetPrivateAddress'), skip(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, indexOf(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '/')), ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnetPrivateAddress'), skip(reference(variables('intSubnetRef'), variables('networkApiVersion')).addressPrefix, indexOf(reference(variables('intSubnetRef'), variables('networkApiVersion')).addressPrefix, '/')), ',vlan:internal --log-level debug; echo ', variables('singleQuote'), '/usr/bin/f5-rest-node --use-strict /config/cloud/node_modules/f5-cloud-libs/node_modules/f5-cloud-libs-azure/scripts/failoverProvider.js', variables('singleQuote'), ' >> /config/failover/active; echo ', variables('singleQuote'), '/usr/bin/f5-rest-node --use-strict /config/cloud/node_modules/f5-cloud-libs/node_modules/f5-cloud-libs-azure/scripts/failoverProvider.js', variables('singleQuote'), ' >> /config/failover/tgrefresh; tmsh modify cm device ', concat(variables('instanceName'), '0.', resourceGroup().location, '.cloudapp.azure.com'), ' unicast-address { { ip ', variables('intSubnetPrivateAddress'), ' port 1026 } }; /usr/bin/f5-rest-node /config/cloud/node_modules/f5-cloud-libs/scripts/cluster.js --output /var/log/cluster.log --log-level debug --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' -u admin --password-url file:///config/cloud/passwd --config-sync-ip ', variables('intSubnetPrivateAddress'), ' --create-group --device-group Sync --sync-type sync-failover --device ', concat(variables('instanceName'), '0.', resourceGroup().location, '.cloudapp.azure.com'), ' --network-failover --auto-sync --save-on-auto-sync', '; if [[ $? == 0 ]]; then tmsh load sys application template f5.service_discovery.tmpl; else exit 1; fi')]"
        },
        "publisher": "Microsoft.Azure.Extensions",
        "settings": {
          "fileUris": [
            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/', variables('f5CloudLibsTag'), '/dist/f5-cloud-libs.tar.gz')]",
            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/', variables('f5CloudIappsTag'), '/f5-service-discovery/f5.service_discovery.tmpl')]",
            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-libs-azure/', variables('f5CloudLibsAzureTag'), '/dist/f5-cloud-libs-azure.tar.gz')]"
          ]
        },
        "type": "CustomScript",
        "typeHandlerVersion": "2.0"
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabel'), '-', variables('instanceName'), '1')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '1/start')]",
      "properties": {
        "autoUpgradeMinorVersion": "true",
        "protectedSettings": {
          "commandToExecute": "[concat('mkdir -p /config/cloud/node_modules && cp f5-cloud-libs*.tar.gz* /config/cloud; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; /usr/bin/install -b -m 400 /dev/null /config/cloud/passwd; /usr/bin/install -b -m 400 /dev/null /config/cloud/azCredentials; /usr/bin/install -b -m 755 /dev/null /config/cloud/managedRoutes; /usr/bin/install -b -m 755 /dev/null /config/cloud/routeTableTag; IFS=', variables('singleQuote'), '%', variables('singleQuote'), '; echo -e ', variables('verifyHash'), ' > /config/verifyHash; echo -e ', variables('installCloudLibs'), ' > /config/installCloudLibs.sh; echo ', variables('singleQuote'), parameters('adminPassword'), variables('singleQuote'), ' > /config/cloud/passwd; echo ', variables('singleQuote'), '{\"clientId\": \"', parameters('clientId'), '\", \"tenantId\": \"', parameters('tenantId'), '\", \"secret\": \"', parameters('servicePrincipalSecret'), '\", \"subscriptionId\": \"', variables('subscriptionID'), '\", \"resourceGroup\": \"', variables('resourceGroupName'), '\"}', variables('singleQuote'), ' > /config/cloud/azCredentials; echo -e ', parameters('managedRoutes'), ' > /config/cloud/managedRoutes; echo -e ', parameters('routeTableTag'), ' > /config/cloud/routeTableTag; unset IFS; bash /config/installCloudLibs.sh; /usr/bin/f5-rest-node /config/cloud/node_modules/f5-cloud-libs/scripts/onboard.js --output /var/log/onboard.log --log-level debug --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u admin --password-url file:///config/cloud/passwd --hostname ', concat(variables('instanceName'), '1.', resourceGroup().location, '.cloudapp.azure.com'), ' --license ', parameters('licenseKey2'), ' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --db tmm.maxremoteloglength:2048 --module ltm:nominal --module afm:none; /usr/bin/f5-rest-node /config/cloud/node_modules/f5-cloud-libs/scripts/network.js --output /var/log/network.log --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' -u admin --password-url file:///config/cloud/passwd --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 --self-ip name:self_2nic,address:', variables('extSubnetPrivateAddress1'), skip(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, indexOf(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '/')), ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnetPrivateAddress1'), skip(reference(variables('intSubnetRef'), variables('networkApiVersion')).addressPrefix, indexOf(reference(variables('intSubnetRef'), variables('networkApiVersion')).addressPrefix, '/')), ',vlan:internal --log-level debug; echo ', variables('singleQuote'), '/usr/bin/f5-rest-node --use-strict /config/cloud/node_modules/f5-cloud-libs/node_modules/f5-cloud-libs-azure/scripts/failoverProvider.js', variables('singleQuote'), ' >> /config/failover/active; echo ', variables('singleQuote'), '/usr/bin/f5-rest-node --use-strict /config/cloud/node_modules/f5-cloud-libs/node_modules/f5-cloud-libs-azure/scripts/failoverProvider.js', variables('singleQuote'), ' >> /config/failover/tgrefresh; tmsh modify cm device ', concat(variables('instanceName'), '1.', resourceGroup().location, '.cloudapp.azure.com'), ' unicast-address { { ip ', variables('intSubnetPrivateAddress1'), ' port 1026 } }; /usr/bin/f5-rest-node /config/cloud/node_modules/f5-cloud-libs/scripts/cluster.js --output /var/log/cluster.log --log-level debug --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' -u admin --password-url file:///config/cloud/passwd --config-sync-ip ', variables('intSubnetPrivateAddress1'), ' --join-group --device-group Sync --sync --remote-host ', variables('mgmtSubnetPrivateAddress'), ' --remote-user admin --remote-password-url file:///config/cloud/passwd', '; if [[ $? == 0 ]]; then tmsh load sys application template f5.service_discovery.tmpl; else exit 1; fi')]"
        },
        "publisher": "Microsoft.Azure.Extensions",
        "settings": {
          "fileUris": [
            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/', variables('f5CloudLibsTag'), '/dist/f5-cloud-libs.tar.gz')]",
            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/', variables('f5CloudIappsTag'), '/f5-service-discovery/f5.service_discovery.tmpl')]",
            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-libs-azure/', variables('f5CloudLibsAzureTag'), '/dist/f5-cloud-libs-azure.tar.gz')]"
          ]
        },
        "type": "CustomScript",
        "typeHandlerVersion": "2.0"
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    }
  ],
  "outputs": {
    "GUI-URL": {
      "type": "string",
      "value": "[concat('https://',reference(concat(variables('mgmtPublicIPAddressId'), '0')).dnsSettings.fqdn, ':', variables('bigIpMgmtPort'))]"
    },
    "SSH-URL": {
      "type": "string",
      "value": "[concat(reference(concat(variables('mgmtPublicIPAddressId'), '0')).dnsSettings.fqdn,' ',22)]"
    }
  }
}